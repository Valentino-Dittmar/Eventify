name: CI/CD Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:latest
        ports:
          - 9000:9000
        options: "--health-cmd=\"curl -s http://localhost:9000/api/system/health | grep -o UP\" --health-interval=15s --health-timeout=15s --health-retries=40"
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONARQUBE_WEB_JAVAOPTS: "-Xmx512m -Xms128m -XX:+HeapDumpOnOutOfMemoryError"  # Lower memory limits

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      # Initial wait before starting health checks
      - name: Initial wait for SonarQube setup
        run: sleep 60

      - name: Wait for SonarQube to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:9000/api/system/health | grep -q '"status":"UP"'; then
              echo "SonarQube is up and running."
              break
            fi
            echo "Waiting for SonarQube to start..."
            sleep 15
          done

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:9000
        run: ./gradlew build sonarqube --info

      - name: Run additional step
        run: curl http://localhost:9000/health

  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Run Tests
        run: ./gradlew test

  dependency-submission:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v4.0.0

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: mr-smithers-excellent/docker-build-push@v4
        with:
          image: valentinodittmar/fontys-project123
          tag: latest
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
